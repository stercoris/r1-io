import { inspect } from 'util';
export declare type Constructor<T = {}> = new (...args: any[]) => T;
export declare type InspectedClass = any;
export declare type NodeInspectContext = typeof inspect.defaultOptions & {
    stylize(text: string, color: string): string;
};
export interface IInspectableContext<P> {
    stylize: (text: string, color: 'special' | 'string') => string;
    inspect: (payload: P, options?: {
        compact?: boolean;
    }) => string;
}
export declare type InspectableSerialize<T, P> = (instance: T) => P;
export declare type InspectableStringify<T, P> = (instance: T, payload: P, context: IInspectableContext<P>) => string;
export interface IInspectableOptions<T, P> {
    serialize?: InspectableSerialize<T, P>;
    stringify?: InspectableStringify<T, P>;
}
