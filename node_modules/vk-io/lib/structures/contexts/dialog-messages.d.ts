import { Context, ContextFactoryOptions, ContextDefaultState } from './context';
import { kSerializeData } from '../../utils/constants';
export declare type DialogMessagesContextType = 'dialog_messages';
export declare type DialogMessagesContextSubType = 'dialog_messages_delete' | 'dialog_messages_restore';
export interface IDialogMessagesContextPayload {
    local_id: number;
    peer_id: number;
}
export declare type DialogMessagesContextOptions<S> = ContextFactoryOptions<number[], S>;
export declare class DialogMessagesContext<S = ContextDefaultState> extends Context<IDialogMessagesContextPayload, S, DialogMessagesContextType, DialogMessagesContextSubType> {
    constructor(options: DialogMessagesContextOptions<S>);
    /**
     * Checks if messages are delete
     */
    get isDelete(): boolean;
    /**
     * Checks if messages are restore
     */
    get isRestore(): boolean;
    /**
     * Returns the peer identifier
     */
    get peerId(): number;
    /**
     * Returns the identifier of the local message
     */
    get localId(): number;
    /**
     * Returns the custom data
     */
    [kSerializeData](): object;
}
